import net.researchgate.release.GitAdapter
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'net.researchgate.release' version '2.6.0'
    id 'io.codearte.nexus-staging' version '0.9.0'
}

ext {
    name = 'Modeller'
    description = 'A BagIt and LDP Client'
    url = 'https://github.com/pan-dora/modeller/'
    inceptionYear = '2017'
    vendor = 'Pandora Ecosystem'
    homepage = 'http://cool.pandora'
    docURL = 'https://github.com/pan-dora/pandora-demo/wiki'
    license = 'Apache 2'
}

configurations {
    buildToolsConfig
}

dependencies {
    buildToolsConfig "cool.pandora:pandora-build-tools:0.1.3"
}

task processBuildTools(type: Copy) {
    from {
        configurations.buildToolsConfig.collect {
            zipTree(it).matching {
                include 'checkstyle/*.xml'
                include 'license/*.txt'
            }
        }
    }
    into 'build'
}

configure(allprojects) { project ->
    apply plugin: 'maven'
    apply plugin: 'java'

    group = 'cool.pandora'

    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://spring-rich-c.sourceforge.net/maven2repository" }
        flatDir {
            dirs "$rootProject.projectDir/lib"
        }
    }

    ext.bagItVersion = "4.12.1"
    ext.commonsIoVersion = "2.5"
    ext.commonsLangVersion = "2.6"
    ext.commonsRdfVersion = '0.5.0'
    ext.fcrepoClientVersion = "0.3.0"
    ext.groovyVersion = "2.4.12"
    ext.imageIoVersion = "3.2.1"
    ext.jaiImageIoVersion = "1.3.0"
    ext.jaxrsVersion = '2.1'
    ext.javaxRsApiVersion = "2.0"
    ext.jenaVersion = "3.1.0"
    ext.jerseyVersion = "2.23.2"
    ext.jgoodiesLooksVersion = "2.0.4"
    ext.jgoodiesVersion = "1.2.1"
    ext.jsonVersion = "20151123"
    ext.junitVersion = "4.12"
    ext.logbackVersion = "1.2.3"
    ext.mustacheVersion = "0.9.3"
    ext.nachoCalendarVersion = "0.23"
    ext.slf4jVersion = "1.7.25"
    ext.springBootVersion = "1.4.0.RELEASE"
    ext.springBootLoggingVersion = "1.3.2.RELEASE"
    ext.springFrameworkVersion = "2.5.1"
    ext.springRichclientVersion = "1.1.0"
    ext.swinglabsVersion = "1.6.1"
    ext.trellisApiVersion = "0.5.2"
    ext.vldockingVersion = "2.1.4"
    ext.xbeamVersion = "1.4.8"

    sourceCompatibility = 1.9
    targetCompatibility = 1.9

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs.add("-Xlint:unchecked")
            options.compilerArgs.add("-Xlint:deprecation")
            options.compilerArgs.addAll(["--add-modules=jdk.incubator.httpclient", "--add-modules=java.xml.bind"])
        }

        tasks.withType(Javadoc) {
            options.addStringOption("-add-modules", "java.xml.bind")
        }
    }

    release {
        tagTemplate = '$name-$version'
        scmAdapters = [
                GitAdapter
        ]

        git {
            requireBranch = 'master'
            pushToRemote = 'origin'
            pushToBranchPrefix = ''
            commitVersionFileOnly = false
        }
    }

    check.dependsOn processBuildTools
}

configure(subprojects) { subproject ->
    apply plugin: 'com.bmuschko.nexus'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'jacoco'

    task processConfig(type: Copy) {
        from('src/main/cfg') {
            include '**/*.cfg'
        }
        into 'build/cfg/main'
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    def exportedProjects = [
            ":modeller-business",
            ":modeller-core",
            ":modeller-iiif",
            ":modeller-marshaller",
            ":modeller-modeller",
            ":modeller-hocr"
    ]

    def docOutputDir = "${rootProject.buildDir}/docs/javadoc"

    task alljavadoc(type: Javadoc) {
        source exportedProjects.collect { project(it).sourceSets.main.allJava }
        classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
        destinationDir = file(docOutputDir)
    }

    jar {
        manifest {
            attributes 'Main-Class': 'cool.pandora.modeller.ModellerApplication'
        }
    }

    artifacts {
        archives sourceJar
    }

    classes {
        classes.dependsOn processConfig
    }

    checkstyle {
        configFile = rootProject.file('build/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('build/checkstyle/')
        toolVersion = "8.1"
    }

    jacoco {
        toolVersion = "0.7.9"
    }

    license {
        include "**/*.java"
        header rootProject.file('build/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                url "$buildDir/maven"
            }
        }
    }

    modifyPom {
        //noinspection GroovyAssignabilityCheck
        project {
            name name
            description description
            url url
            inceptionYear inceptionYear

            organization {
                name vendor
                url homepage
            }

            developers {
                developer {
                    id 'christopher-johnson'
                    name 'Christopher Johnson'
                    email 'chjohnson @ (domain of organization url)'
                    organization 'Pan-dora Ecosystem'
                    organizationUrl 'https://pan-dora.github.io/'
                    roles {
                        role 'developer'
                    }
                    timezone '+1'
                }
            }

            scm {
                connection 'scm:git:git://github.com/pan-dora/modeller.git'
                developerConnection 'scm:git:git@github.com/pan-dora/modeller.git'
                url 'https://github.com/pan-dora/modeller/'
                tag 'HEAD'
            }

            licenses {
                license {
                    name 'Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                }
            }
        }
    }

    nexusStaging {
        packageGroup = "cool.pandora"
        stagingProfileId = "4d5f13c386f543"
    }

    nexus {
        sign = true
        repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

project("modeller-modeller") {
    apply plugin: "application"

    mainClassName = "cool.pandora.modeller.ModellerApplication"
    applicationDefaultJvmArgs += ["--add-modules=jdk.incubator.httpclient","--add-modules=java.xml.bind"]

    description = """Spring richclient Modeller GUI"""

    jar.baseName = "modeller"

    dependencies {
        compile project(":modeller-core"),
                project(":modeller-business"),
                project(":modeller-iiif"),
                project(":modeller-ldpclient"),
                project(":modeller-marshaller"),
                project(":modeller-hocr"),
                "com.vlsolutions:vldocking:${vldockingVersion}",
                "net.sf.nachocalendar:nachocalendar:${nachoCalendarVersion}",
                "org.springframework.richclient:spring-richclient-resources:${springRichclientVersion}",
                "org.springframework.richclient:spring-richclient-jdk6:${springRichclientVersion}",
                "org.springframework.richclient:spring-richclient-vldocking:${springRichclientVersion}"
        compile("org.springframework.richclient:spring-richclient-core:${springRichclientVersion}") {
            exclude group: 'org.springframework', module: 'spring-core'
        }
        compile group: 'com.sun.activation', name: 'javax.activation', version: '1.2.0'
        compile group: 'org.apache.commons', name: 'commons-rdf-jena', version: commonsRdfVersion
        compile group: 'org.trellisldp', name: 'trellis-api', version: trellisApiVersion
        compile group: 'org.apache.commons', name: 'commons-rdf-api', version: commonsRdfVersion
        compile group: 'org.apache.jena', name: 'jena-arq', version: '3.4.0'
        compile "com.jgoodies:forms:${jgoodiesVersion}"
        compile "org.swinglabs:swingx:${swinglabsVersion}"
        compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
        compile "org.springframework.boot:spring-boot-starter-logging:${springBootVersion}"
        compile "commons-lang:commons-lang:${commonsLangVersion}"
        compile "com.github.jai-imageio:jai-imageio-core:${jaiImageIoVersion}"
        testCompile "junit:junit:${junitVersion}"
        runtime "com.jgoodies:looks:${jgoodiesLooksVersion}"
    }

    startScripts {
        if (project.version == "unspecified") {
            applicationDefaultJvmArgs += ["-Xdebug", "-Xrunjdwp:server=y,transport=dt_socket,address=4000,suspend=n"]
        }

        unixStartScriptGenerator.template = resources.text.fromFile(project.projectDir.path + '/customUnixStartScript' +
                '.txt')
        windowsStartScriptGenerator.template = resources.text.fromFile(project.projectDir.path +
                '/customWindowsStartScript.txt')
    }

    afterEvaluate {
        configure(tasks.processResources) {
            eachFile { copyDetails ->
                if (copyDetails.name == 'about.txt' || copyDetails.name == 'messages.properties') {
                    filter(ReplaceTokens, tokens: [VERSION: project.version])
                }
            }
        }
    }
}


project("modeller-business") {
    description = 'Spring richclient bagger business'
    dependencies {
        compile "org.springframework.boot:spring-boot-starter-logging:${springBootLoggingVersion}",
                "org.springframework:spring-core:${springFrameworkVersion}",
                "org.springframework:spring-beans:${springFrameworkVersion}",
                "org.springframework:spring-context:${springFrameworkVersion}",
                "org.json:json:${jsonVersion}"
    }
}

project("modeller-core") {
    dependencies {
        compile "gov.loc:bagit:${bagItVersion}",
                project(":modeller-business"),
                "org.springframework:spring-core:${springFrameworkVersion}",
                "org.springframework:spring-beans:${springFrameworkVersion}",
                "org.springframework:spring-context:${springFrameworkVersion}",
                "org.springframework.boot:spring-boot-starter-logging:${springBootLoggingVersion}"
    }
}

project("modeller-hocr") {
    dependencies {
        compile project(":modeller-iiif")
        compile "commons-io:commons-io:${commonsIoVersion}"
        compile "org.xmlbeam:xmlprojector:${xbeamVersion}"
        compile "org.apache.jena:jena-arq:${jenaVersion}"
        compile "org.apache.jena:jena-core:${jenaVersion}"
        testCompile "junit:junit:${junitVersion}"
    }
}

project("modeller-iiif") {
    group 'cool.pandora'

    dependencies {


        compile "org.fcrepo.client:fcrepo-java-client:${fcrepoClientVersion}"
        compile "com.github.spullara.mustache.java:compiler:${mustacheVersion}"
        compile "commons-io:commons-io:${commonsIoVersion}"
        compile "org.apache.jena:jena-core:${jenaVersion}"
        compile "org.apache.jena:jena-arq:${jenaVersion}"
        compile "com.twelvemonkeys.imageio:imageio-tiff:${imageIoVersion}"
        compile "com.github.jai-imageio:jai-imageio-jpeg2000:${jaiImageIoVersion}"
        testCompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
        testCompile "junit:junit:${junitVersion}"
        testCompile "ch.qos.logback:logback-classic:${logbackVersion}"
    }

}

project("modeller-ldpclient") {
    dependencies {
        compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
        compile group: 'org.apache.commons', name: 'commons-rdf-jena', version: commonsRdfVersion
        compile "javax.ws.rs:javax.ws.rs-api:${javaxRsApiVersion}"
        testCompile "junit:junit:${junitVersion}"
    }
}