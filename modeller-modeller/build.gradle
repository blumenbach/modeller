group 'org.blume'
version '0.1-SNAPSHOT'

import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: "application"

repositories {
    maven { url "http://spring-rich-c.sourceforge.net/maven2repository" }
    mavenCentral()
    flatDir {
        dirs "$rootProject.projectDir/lib"
    }
}

mainClassName = "org.blume.modeller.ModellerApplication"

description = """Spring richclient Modeller GUI"""

jar.baseName="modeller"

dependencies {
    compile project(':modeller-core'),
            project(':modeller-business'),
            project(':modeller-fedora'),
            'org.springframework.boot:spring-boot-starter-logging:1.3.2.RELEASE',
            'com.vlsolutions:vldocking:2.1.4',
            'com.jgoodies:forms:1.0.7',
            'net.sf.nachocalendar:nachocalendar:0.23',
            'org.codehaus.groovy:groovy-all:latest.integration',
            'org.springframework.richclient:spring-richclient-resources:1.1.0',
            'org.springframework.richclient:spring-richclient-docking:1.0.0',
            'org.springframework.richclient:spring-richclient-sandbox:1.0.0',
            'org.springframework.richclient:spring-richclient-core:1.1.0',
            'org.springframework.richclient:spring-richclient-jdk6:1.1.0',
            'org.swinglabs:swingx:0.9.3',
            'org.springframework.richclient:spring-richclient-vldocking:1.1.0' //cause the maven repo doesn't have this version
    testCompile group: 'junit', name: 'junit', version: '4.11'
    runtime 'com.jgoodies:looks:2.0.4'
}

//include the docs and licenses into the distributable zip/tar
distributions {
    main{
        contents {
            //include the various user guides
            from("doc") {
                into "doc"
            }

            //include the keystore used for signing jars
            from("${rootDir.path}/keystore") {
                into "keystore"
            }

            //include helpful scripts
            from("scripts") {
                into "bin"
            }
        }
    }
}

startScripts {
    if(project.version == "unspecified"){
        applicationDefaultJvmArgs += ["-Xdebug", "-Xrunjdwp:server=y,transport=dt_socket,address=4000,suspend=n"]
    }

    unixStartScriptGenerator.template = resources.text.fromFile(project.projectDir.path + '/customUnixStartScript.txt')
    windowsStartScriptGenerator.template = resources.text.fromFile(project.projectDir.path + '/customWindowsStartScript.txt')
}

afterEvaluate {
    configure(tasks.processResources) {
        eachFile { copyDetails ->
            if (copyDetails.name == 'about.txt' || copyDetails.name == 'messages.properties') {
                filter(ReplaceTokens, tokens:[VERSION: project.version])
            }
        }
    }
}